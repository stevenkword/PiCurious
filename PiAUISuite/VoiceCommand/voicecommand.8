.\" Manpage for playvideo.
.\" Contact help@stevenhickson to add input or correct errors or typos.
.TH man 8 "13 May 2013" "2.0" "voicecommand man page"
.SH NAME
voicecommand \- Listen to user defined strings and run the corresponding command
.SH SYNOPSIS
.I "voicecommand [OPTIONS]..."
.SH DESCRIPTION
voicecommand was developed for the Raspberry Pi but will work on any linux system with a microphone attached. It is a crude program, which uses basic comparisons to determine if your voicecommand fits a format specified in a config file; it it does, it runs the corresponding linux command. It supports auto-completion and variables as well as command verification, a continuous mode, and other options.
For help/comments/questions, feel free to e-mail me at help@stevenhickson.com. I answer sporadically but do eventually respond.
.PP

.TP
Note: All of the flags that turn something on are off can be reversed and overwritten by following it with a 1 or 0. So for instance if you have !continuous==1 in your config file, you can run voicecommand -c0 to turn continuous off.

.SH OPTIONS
.TP
.I "?"
Same as -h

.TP
.I "-b"
Turns off the FILL audio. The purpose of this was because the Raspbery Pi (or mine at least) cuts off the first few seconds of audio. This flag turns that feature off. You should only be concerned with this if you hear FILL before everything it says.

.TP
.I "-c"
Makes voicecommand run in continuous mode, where it will keep listening over and over again.

.TP
.I "-d"
Sets the duration for listening to the audio for voice commands

.TP
.I "-D"
Sets the audio hardware. The default is plughw:1,0
-
.TP
.I "-e"
Edits the voicecommand config file.
.br
The format is voice==command
.br
You can use any character except for newlines or ==
.br
If the voice starts with ~, the program looks for the keyword anywhere. Ex: ~weather would pick up on weather or what's the weather
.br
You can use ... at the end of the command to specify that everything after the given keyword should be options to the command.
.br
.I "Ex: play==playvideo ..."
.br
This means that if you say "play Futurama", it will run the command playvideo Futurama
.br
You can use $# (where # is any number 1 to 9) to represent a variable. These should go in order from 1 to 9
.br
.I  "Ex: $1 season $2 episode $3==playvideo -s $2 -e $3 $1"
.br
This means if you say game of thrones season 1 episode 2, it will run playvideo with the -s flag as 1, the -e flag as 2, and the main argument as game of thrones, i.e. playvideo -s 1 -e 2 game of thrones
.br
Because of these options, it is important that the arguments range from most strict to least strict.
.br
This means that ~ arguments should probably be at the end.
.br
You can also put comments if the line starts with # and special options if the line starts with a !
.br
Default options are shown as follows:
.br
.I "!keyword==pi,!verify==1,!continuous==1,!quiet==0,!ignore==0,!thresh==0.7,!maxResponse==-1"
.br
.I "api==BLANK,!filler==FILLER FILL,!response==Yes Sir?,!duration==3,!com_dur==2,!hardware==plughw:1,0,!language==en_us"
.br
Keyword, filler, and response accept strings. verify, continuous, quiet, and ignore except 1 or 0 (true or false respectively). thresh excepts a floating point number. These allow you to set some of the flags as permanent options (If these are set, you can overwrite them with the flag options).
.br
You can set a WolframAlpha API and maxResponse (the number of branches) like !api==XXXXXX-XXXXXXXXXX amd !maxResponse==3
.br
You can now customize the language support for speech recognition and some text to speech with the language flag. Look up your country code and use that. Ex. For US: !language==en_us, for Spain !language==es, for Germany !language==de.

.TP
.I "-f /my-location/config-file"
This allows you to load a different config file located in a different spot. The default one is in your home directory and is ~/.commands.conf
.br
The config file must be formatted the same way.

.TP
.I "-h"
Shows this man page.

.TP
.I "-i"
Sets the ignore mode. When this flag is activated, if a command is not in the config file, nothing happens. The default behavior is to try to find an answer or response to that question and then speak it. This turns off that behavior.

.TP
.I "-I string"
Sets the forced input mode. This allows you to test it without the microphone or get it to parse typed information. It will not run in continuous mode with this.

.TP
.I "-k word"
Sets the keyword. The default is pi. If this flag is set, the verify and continuous flags are also set since this is only checked during those two modes. 
.br
.I "	Ex. voicecommand -c -v -k Jarvis"

.TP
.I "-l"
Sets the duration for listening to the audio for the command keyword. This is different than the -d flag that listens for the voice commands.

.TP
.I "-s"
Runs a setup operation that attempts to set all of the config options in the config file so that voicecommand works properly

.TP
.I "-r word"
Sets the response. The default is "Yes Sir?" (For version 1.0, it was Ready?. If this response is more than one word, it should be put in quotes, otherwise it doesn't need to be
.br
.I "	Ex. voicecommand -r Ready?"

.TP
.I "-t #"
Sets the threshold for volume to determine if the keyword was spoken. This should be a floating point number. The default value is 0.7 which works well with the Logitech C310 camera/mic from about 6 feet away.
.br
.I "    Ex. voicecommand -t 1.2"

.TP
.I "-p"
Sets passthrough mode on so that instead of running the commands, it just prints them. This is going to be used for the XBMC plugin and Android app.

.TP
.I "-q"
Sets quiet mode on so that voicecommand never speaks through the audio output. It still prints everything but doesn't ever respond. This includes the keyword response.

.TP
.I "-v"
Makes voicecommand verify the keyword. This only happens in continuous mode so if this flag is set, the continuous flag will be set as well. The default mode is to not verify. When voicecommand hears any sound above the threshold, it says the response then listens for a command. The default keyword is pi. When the verify flag is set, after the threshold is met, voicecommand verifies that the keyword was spoken. 

.SH AUTHOR
.I "Steven Hickson (help@stevenhickson.com)"
.SH BUGS
No known bugs. To report bugs, send a clear description to help@stevenhickson.com
Since this program is fairly crude, user typos could cause crashes/failed responses. Please read the man page thoroughly before submitting a bug.
.SH COPYRIGHT
Copyright Â©  2013 Steven Hickson. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it as long as you give credit to the author and include this license.  There is NO WARRANTY, to the extent permitted by law.
.SH HISTORY
This is the second major version of this program
.SH SEE ALSO
http://stevenhickson.blogspot.com/
